class EasyCarousel { constructor(b, a) { this.carouselQuery = b, this.autoSlide = a >= 100 || null !== a ? a : null; let g = b.querySelector(".carousel-dots"), c = b.querySelector(".carousel-slider"), d = b.querySelectorAll(".carousel-control"), e = 0, h = 0; window.addEventListener("resize", () => { i(), f(), j(0) }), d && d.forEach(a => { a.classList.contains("prev") && a.addEventListener("click", () => j("prev")), a.classList.contains("next") && a.addEventListener("click", () => j("next")) }), a && (c.addEventListener("mouseenter", () => { clearInterval(e) }), c.addEventListener("mouseleave", () => { e = setInterval(() => j("next"), a) })); let i = () => { let a = b.querySelectorAll(".carousel-slide").length, c = parseInt(getComputedStyle(b.querySelector(".carousel-slide")).minWidth), d = Math.round(100 / c), e = a - (d - 1), f = b.querySelector(".carousel-slide").offsetWidth; return { screensCount: e, slideWidth: f } }, j = d => { a && (clearInterval(e), e = setInterval(() => j("next"), a)); let b = i(); switch (d) { case "prev": h -= 1; break; case "next": h += 1; break; default: h = d }h >= b.screensCount && (h = 0), h < 0 && (h = b.screensCount - 1), c.scrollLeft = h * b.slideWidth, g && b.screensCount > 1 && (g.querySelector(".carousel-dot.active") && g.querySelector(".carousel-dot.active").classList.remove("active"), g.querySelector(`[data-dot="${h}"]`).classList.add("active")) }; a && (e = setInterval(() => { j("next") }, a)); let k = () => { let c = i(), b = ""; for (let a = 0; a < c.screensCount; a++)b += `<button data-dot="${a}" class="carousel-dot ${a === h ? "active" : ""}"/>`; g.innerHTML = b, g.querySelectorAll(".carousel-dot").forEach((a, b) => { a.addEventListener("click", () => { j(b) }) }) }, f = () => { let a = i(); a.screensCount > 1 ? (d.forEach(a => { a.style.display = "flex" }), g && (g.style.display = "flex", k())) : (d.forEach(a => { a.style.display = "none" }), g && (g.style.display = "none")) }; f(); let l = 0, m = 0; window.addEventListener("keydown", a => { "ArrowRight" === a.key && j("next"), "ArrowLeft" === a.key && j("prev") }), c.addEventListener("touchstart", a => { c.style.overflow = "scroll", l = a.changedTouches[0].screenX }), c.addEventListener("touchend", a => { c.style.overflow = "hidden", m = a.changedTouches[0].screenX, n() }); let n = () => { m <= l && j("next"), m >= l && j("prev"), l = 0, m = 0 } } }